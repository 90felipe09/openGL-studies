15-08-2020
Today i'm creating a shader parser.

Basically i'm separating my shaders inside a specific folder and files with shaders code. As long it is just string, i'll program a shader parser to input it inside my source code.

Followed theCherno again, but i've noticed something different. Well, apparently the version supported by my installed specs is the GLES 3.1. It is a little bit different because i have to specify the desired precision for float values in my shaders. Besides that, i can modify the color of the triangle in my screen.

my main.cpp is increasing and i think that i can separate some behaviour in different files, but that is an issue for another day.

I gave a break at 10AM and now i'm coming back to follow up the usage of Index Buffers from theCherno. It's 20:08. I think that's what i can do for today because after dinner me and my family are watching death note. They're liking it. It's cool.

The idea now is rendering a square with two triangles. Knowing that we are drawing triangles to form continuous shapes, we are informing 2 redundant vertices. Now, in order to reuse existent vertices to use less memory (because an actual prop or character has a lot of vertices and faces and we are interested in saving memory for the gpu), we provide an index buffer along a vertexBuffer in order to help the renderer to know the indices of each vertex from vertexBuffer.

It looks something like this:
vertexBuffer:
3(-0.5, 0.5) ------ 2(0.5, 0.5)
|                           |
|                           |
|                           |
|                           |
|                           |
0(-0.5, -0.5) ------ 1(0.5, -0.5)

indexBuffer:
    0, 1, 2
    2, 3, 0
    So, this indexBuffer is instructing the gpu which vertices from the vertexBuffer groups in a triangle to be rendered.

And now, i've got a nice rectangle on my view rendered optimized with a index buffer. It's a commit.

Now i'm ending with the errors handling step.

This is very important because there are some type errors that doesn't cause compiling errors or errors log. So we have to mount an error notification. I've seen something similar in a graduation experiment with CUDA that the given code already had some self built error logger. So it looks like heterogenous computation raises this kind of caution.

So we are using glGetError function. It detected an error and return it's error code number. From this we can retrieve the error message. And more, we can use precompiler directives called __LINE__ to specify the line that the error occurred! So this is how error loggers from compilers, interpreters and etc logs these kind of messages!

I'm back. Me and my parents finished watching death note. Today Light left Death Note. Oh, they are so hyped to see what happens next.

Basically created a kind of a decorator with macros that identify the occurence of errors and print the file and the line that the error occured.

And hurray. That worked;

A good commit for today

Now adding a new and last feature: uniform handling. Uniforms are variables that we can modify from the cpu on shaders processed by GPU. So it means that we can change the color dinamically from fragment shaders or the position of vertices.

To use uniforms in shader, i declare a type that starts with u_ and i get this.
Now i'm changing the color of the square over time;

Neat!

A nice commit for today.

Now time to sleep. Today was a good day.